# -*- coding: utf-8 -*-
"""TF-IDF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hOJqHAYb2bSO0KHMo-B0CXcQCiv_OxSR
"""

import pandas as pd
import numpy as np

docs = ['먹고 싶은 사과', #문서 0
        '먹고 싶은 바나나', #문서 1
        '길고 노란 바나나 바나나', #문서 2
        '저는 과일이 좋아요'] #문서 3

docs

from sklearn.feature_extraction.text import CountVectorizer
vect = CountVectorizer() #Count Vectorizser 객체 생성

vect

# 문장을 Count Vectorizser 형태로 변환
countvect = vect.fit_transform(docs)
countvect #  4x9 4개의 문서의 9개의 단어

# toarray()를 통해서 문장이 Vector 형태의 값을 얻을 수 있음
# 하지만, 각 인덱스와 컬럼이 무엇을 의미하는지에 대해서는 알 수 없음
# sparse matrix -> numpy
countvect.toarray()

# 단어 정렬
sorted(vect.vocabulary_)

countvect_df = pd.DataFrame(countvect.toarray(), columns = sorted(vect.vocabulary_))
countvect_df.index = ['문서1', '문서2', '문서3', '문서4']
countvect_df

# 위의 DataFrame 형태의 유사도를 계산
from sklearn.metrics.pairwise import cosine_similarity
cosine_similarity(countvect_df,countvect_df)


# 0번 문서와 1번문서가 유사함

#CountVectorizer -> TfidVectorizer

from sklearn.feature_extraction.text import TfidfVectorizer
vect = TfidfVectorizer()
tfvect = vect.fit(docs)
tfvect

tfidv_df = pd.DataFrame(tfvect.transform(docs).toarray() , columns= sorted(vect.vocabulary_))
tfidv_df.index =['문서1', '문서2', '문서3', '문서4']
tfidv_df

from sklearn.metrics.pairwise import cosine_similarity
cosine_similarity(tfidv_df, tfidv_df)

from sklearn.feature_extraction.text import TfidfVectorizer
vect = TfidfVectorizer(max_features=4)
tfvect = vect.fit(docs)
tfvect

tfdv_df = pd.DataFrame(tfvect.transform(docs).toarray(), columns = sorted(vect.vocabulary_))
tfidv_df.index = ['문서1', '문서2','문서3', '문서4']
tfidv_df

